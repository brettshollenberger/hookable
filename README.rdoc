= hookable

Create hook methods like Ruby's `included` and `extended`.

  module Loggable
    def self.included(base)
      base.extend ClassMethods
    end
    
    module ClassMethods
      include Hookable # Just mixin Hookable
      
      def log(method_name)
        alias_method "unlogged_#{method_name}", method_name
        define_method method_name do |*args, &block|
          puts "#{method_name} called with #{args}"
          send "unlogged_#{method_name}", *args, &block
        end
        private "unlogged_#{method_name}"
      end
      
      def logged(method_name, *args, &block)
        puts "#{method_name} will now be logged."
      end
      
      hook :log, :logged # And hook your methods
    end
  end
  
As you would expect, classes that include the `Loggable` class can override the hooked `logged` method:

  class Party
    include Loggable
    
    def self.logged(method_name, *args, &block)
      puts "It's a party! Log that #{method_name}!"
    end
    
    def fun?
      true
    end
    
    log :fun?
  end

== Contributing to hookable
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet.
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it.
* Fork the project.
* Start a feature/bugfix branch.
* Commit and push until you are happy with your contribution.
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Copyright

Copyright (c) 2014 Brett Shollenberger. See LICENSE.txt for
further details.

